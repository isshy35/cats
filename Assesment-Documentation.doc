# Introduction
This document provides a comprehensive overview of the deployment process for our Ruby application. The process begins with local development and testing, followed by manual server deployment, and ultimately transitions to an automated CI/CD pipeline using GitHub Actions.

 Phase 1: Local Development Setup
1. **Code Acquisition**
   - Cloned the application source code to local development environment
   - Established version control with Git for tracking changes

2. **Environment Configuration**
   - Installed Ruby runtime environment
   - Installed required gems and dependencies using Bundler
   - Configured development environment variables

3. **Build Process**
   - Performed application build steps
   - Ran tests to verify functionality
   - Created production-ready artifacts

 Phase 2: Manual Server Deployment
4. **Process Management Setup**
   - Installed PM2 process manager on the server
   - Configured PM2 to manage the Ruby application
   - Set up PM2 to ensure application persistence across server restarts
   - Created PM2 configuration with name "my-rubyyy"

5. **Web Server Configuration**
   - Installed Nginx web server on the production environment
   - Configured Nginx as a reverse proxy for the Ruby application
   - Set up proper routing and domain configurations
    - Configured Nginx to forward requests to the PM2-managed application

6. **Version Control**
   - Pushed all code, configurations, and deployment scripts to Git repository
   - Tagged stable releases for tracking purposes
   - Documented configuration changes and deployment steps

Phase 3: Deployment Replication and Automation
7. **Manual Server Replication**
   - Replicated the deployment process on production server
   - Verified environment parity between development and production
   - Performed manual testing to ensure correct functionality

8. **CI/CD Pipeline Implementation**
   - Set up GitHub Actions workflow to automate deployment
   - Configured necessary secrets and environment variables in GitHub
   - Created workflow to trigger on pushes to the main branch
   - Implemented SSH-based deployment to EC2 instance

CI/CD Pipeline Details
 GitHub Actions Workflow
The automated deployment pipeline performs the following tasks:

1. **Trigger Conditions**
   - Activates when code is pushed to the main branch
   - Can be manually triggered through GitHub interface

2. **Deployment Steps**
   - Establishes SSH connection to the EC2 production server
   - Pulls latest code from the Git repository
   - Copies application files to `/home/ubuntu/cats` directory
   - Installs or updates dependencies
   - Restarts the application using PM2 with name "my-rubyyy"
   - Restarts Nginx to apply any configuration changes

3. **Error Handling**
   - Implements checks at each stage of deployment
   - Rolls back deployment if critical errors occur
   - Reports deployment status to GitHub

#Server Environment
 Application Location
- Primary application files reside in `/home/ubuntu/cats`
- Application runs under PM2 process management
- Exposed port 80 on server
- Nginx serves as the public-facing reverse proxy

### Maintenance Procedures
- Regular backups of application data
- Periodic dependency updates
- Security patches application following best practices
- Monitoring via PM2 and server logging

Conclusion
This deployment approach provides a robust, repeatable process that begins with local development and testing and culminates in an automated CI/CD pipeline. The use of PM2 ensures application resilience, while Nginx provides secure and efficient request handling. The GitHub Actions workflow automates the deployment process, reducing manual intervention and potential for human error.

I have made the repo public and i have attached the link  and a screenshot of two versions of the app to this document.
